import os
import re
import yaml

def format_parent_section(section):
    """
    Format the parent section name according to the specified schema.
    """
    section = section.replace('akash/', '')  # Remove 'akash/'
    section = section.replace('.proto', '')  # Remove '.proto'
    parts = section.split('/')
    formatted_section = '-'.join([part.capitalize() for part in parts])
    return formatted_section

def parse_protobuf_documentation(doc_path):
    """
    Parse the protobuf documentation and return the structured data.
    """
    with open(doc_path, 'r') as f:
        lines = f.readlines()
    
    nav_entries = []
    current_parent = None

    for line in lines:
        line = line.strip()
        if not line:
            continue

        main_section_match = re.match(r'- \[(.*?)\]\(#(.*?)\)', line)
        sub_section_match = re.match(r'\s{4}- \[(.*?)\]\(#(.*?)\)', line)

        if main_section_match:
            main_section = main_section_match.group(1)
            main_link = main_section_match.group(2)
            if ".proto" in main_section:
                # Create a new parent entry with formatted name
                formatted_main_section = format_parent_section(main_section)
                current_parent = {formatted_main_section: []}
                nav_entries.append(current_parent)
            elif current_parent:
                # Add child entry to the current parent with modified link
                current_parent[list(current_parent.keys())[0]].append({main_section: f'node/#{main_link}'})
        elif sub_section_match and current_parent:
            sub_section = sub_section_match.group(1)
            sub_link = sub_section_match.group(2)
            current_parent[list(current_parent.keys())[0]].append({sub_section: f'node/#{sub_link}'})

    return nav_entries

def update_mkdocs_yml(nav_entries, mkdocs_yml_path):
    """
    Update the mkdocs.yml file with the new protobuf documentation entries.
    """
    with open(mkdocs_yml_path, 'r') as f:
        mkdocs_yml = yaml.safe_load(f)
    
    nav = mkdocs_yml.get('nav', [])
    
    protobuf_doc_section = None
    for entry in nav:
        if 'Protobuf Documentation' in entry:
            protobuf_doc_section = entry['Protobuf Documentation']
            break

    if protobuf_doc_section is None:
        protobuf_doc_section = []
        nav.append({'Protobuf Documentation': protobuf_doc_section})
    
    protobuf_doc_section.extend(nav_entries)

    mkdocs_yml['nav'] = nav

    with open(mkdocs_yml_path, 'w') as f:
        yaml.dump(mkdocs_yml, f, default_flow_style=False)

def main():
    doc_path = 'node.md'  # Path to the parsed protobuf documentation file
    mkdocs_yml_path = 'mkdocs.yml'  # Path to the mkdocs.yml file

    nav_entries = parse_protobuf_documentation(doc_path)
    update_mkdocs_yml(nav_entries, mkdocs_yml_path)

if __name__ == "__main__":
    main()
